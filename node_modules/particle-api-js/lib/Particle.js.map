{"version":3,"sources":["../src/Particle.js"],"names":[],"mappings":"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","file":"Particle.js","sourcesContent":["import 'babel-polyfill';\nimport request from 'superagent';\nimport prefix from 'superagent-prefix';\nimport Defaults from './Defaults';\nimport EventStream from './EventStream';\n\n/**\n * Particle Cloud API wrapper.\n *\n * See <https://docs.particle.io/reference/javascript/> for examples\n * of using the `Particle` class.\n *\n * Most Particle methods take a single unnamed argument object documented as\n * `$0` with key/value pairs for each option.\n */\nclass Particle {\n\t/**\n\t * Contructor for the Cloud API wrapper.\n\t *\n\t * Create a new Particle object and call methods below on it.\n\t *\n\t * @param  {Object} options Options to be used for all requests (see [Defaults](../src/Defaults.js))\n\t */\n\tconstructor(options = Defaults) {\n\t\tObject.assign(this, options);\n\t\tthis.prefix = prefix(this.baseUrl);\n\t}\n\n\t/**\n\t * Login to Particle Cloud using an existing Particle acccount.\n\t * @param  {String} $0.username      Username for the Particle account\n\t * @param  {String} $0.password      Password for the Particle account\n\t * @param  {Number} $0.tokenDuration How long the access token should last in seconds\n\t * @return {Promise}\n\t */\n\tlogin({ username, password, tokenDuration = this.tokenDuration }) {\n\t\treturn this.request({ uri: '/oauth/token', form: {\n\t\t\tusername,\n\t\t\tpassword,\n\t\t\tgrant_type: 'password',\n\t\t\tclient_id: this.clientId,\n\t\t\tclient_secret: this.clientSecret,\n\t\t\texpires_in: tokenDuration,\n\t\t}, method: 'post' });\n\t}\n\n\t/**\n\t * Create a user account for the Particle Cloud\n\t * @param  {String} $0.username Email of the new user\n\t * @param  {String} $0.password Password\n\t * @return {Promise}\n\t */\n\tcreateUser({ username, password }) {\n\t\treturn this.post('/v1/users', {\n\t\t\tusername, password,\n\t\t});\n\t}\n\n\t/**\n\t * Send reset password email for a Particle Cloud user account\n\t * @param  {String} $0.username Email of the user\n\t * @return {Promise}\n\t */\n\tresetPassword({ username }) {\n\t\treturn this.post('/v1/user/password-reset', { username });\n\t}\n\n\t/**\n\t * Revoke an access token\n\t * @param  {String} $0.username Username of the Particle cloud account that the token belongs to.\n\t * @param  {String} $0.password Password for the account\n\t * @param  {String} $0.token    Access token you wish to revoke\n\t * @return {Promise}\n\t */\n\tremoveAccessToken({ username, password, token }) {\n\t\treturn this.delete(`/v1/access_tokens/${token}`, {\n\t\t\taccess_token: token,\n\t\t}, { username, password });\n\t}\n\n\t/**\n\t * List all valid access tokens for a Particle Cloud account\n\t * @param  {String} $0.username Username\n\t * @param  {String} $0.password Password\n\t * @return {Promise}\n\t */\n\tlistAccessTokens({ username, password }) {\n\t\treturn this.get('/v1/access_tokens', { username, password });\n\t}\n\n\t/**\n\t * List devices claimed to the account\n\t * @param  {String} $0.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistDevices({ auth }) {\n\t\treturn this.get('/v1/devices', auth);\n\t}\n\n\t/**\n\t * Get detailed informationa about a device\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.auth     Access token\n\t * @return {Promise}\n\t */\n\tgetDevice({ deviceId, auth }) {\n\t\treturn this.get(`/v1/devices/${deviceId}`, auth);\n\t}\n\n\t/**\n\t * Claim a device to the account. The device must be online and unclaimed.\n\t * @param  {String} $0.deviceId Device ID\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tclaimDevice({ deviceId, requestTransfer, auth }) {\n\t\treturn this.request({ uri: '/v1/devices', form: {\n\t\t\tid: deviceId,\n\t\t\trequest_transfer: !!requestTransfer\n\t\t}, auth, method: 'post' });\n\t}\n\n\t/**\n\t * Unclaim / Remove a device from your account\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tremoveDevice({ deviceId, auth }) {\n\t\treturn this.delete(`/v1/devices/${deviceId}`, null, auth);\n\t}\n\n\t/**\n\t * Rename a device\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.name     Desired Name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\trenameDevice({ deviceId, name, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, { name }, auth);\n\t}\n\n\t/**\n\t * Generate a claim code to use in the device claiming process.\n\t * @param  {String} $0.auth  Access Token\n\t * @param  {String} [$0.iccid] ICCID of the SIM card used in the Electron\n\t * @return {Promise}\n\t */\n\tgetClaimCode({ auth, iccid = undefined }) {\n\t\treturn this.post('/v1/device_claims', { iccid }, auth);\n\t}\n\n\tvalidatePromoCode({auth, promoCode}) {\n\t\treturn this.get(`/v1/promo_code/${promoCode}`, auth);\n\t}\n\n\tchangeProduct({ deviceId, productId, shouldUpdate, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, {\n\t\t\tproduct_id: productId,\n\t\t\tupdate_after_claim: shouldUpdate || false,\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Get the value of a device variable\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.name     Variable name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tgetVariable({ deviceId, name, auth }) {\n\t\treturn this.get(`/v1/devices/${deviceId}/${name}`, auth);\n\t}\n\n\t/**\n\t * Instruct the device to turn on/off the LED in a rainbow pattern\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {Boolean} $0.signal   Signal on or off\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tsignalDevice({ deviceId, signal, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, {\n\t\t\tsignal: ( !!signal ? '1' : '0' ),\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Compile and flash application firmware to a device\n\t * @param  {String} $0.deviceId      Device ID or Name\n\t * @param  {Object} $0.files         Object containing files to be compiled. Keys should be the filenames, and the values should be a path or Buffer of the file contents.\n\t * @param  {String} [$0.targetVersion=latest] System firmware version to compile against\n\t * @param  {String} $0.auth          String\n\t * @return {Promise}\n\t */\n\tflashDevice({ deviceId, files, targetVersion, auth }) {\n\t\tconst form = {};\n\t\tif (targetVersion) {\n\t\t\tform.build_target_version = targetVersion;\n\t\t} else {\n\t\t\tform.latest = 'true';\n\t\t}\n\t\treturn this.request({ uri: `/v1/devices/${deviceId}`,\n\t\t\tfiles, auth, form, method: 'put' });\n\t}\n\n\t/**\n\t * Flash the Tinker application to a device\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tflashTinker({ deviceId, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, {\n\t\t\tapp: 'tinker',\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Compile firmware using the Particle Cloud\n\t * @param  {Object} $0.files         Object containing files to be compiled. Keys should be the filenames, and the values should be a path or Buffer of the file contents.\n\t * @param  {Number} [$0.platformId]    Platform id number of the device you are compiling for. Common values are 0=Core, 6=Photon, 10=Electron.\n\t * @param  {String} [$0.targetVersion=latest] System firmware version to compile against\n\t * @param  {String} $0.auth          Access Token\n\t * @return {Promise}\n\t */\n\tcompileCode({ files, platformId, targetVersion, auth }) {\n\t\tconst form = { platform_id: platformId };\n\t\tif (targetVersion) {\n\t\t\tform.build_target_version = targetVersion;\n\t\t} else {\n\t\t\tform.latest = 'true';\n\t\t}\n\t\treturn this.request({ uri: '/v1/binaries',\n\t\t\tfiles, auth, form, method: 'post' });\n\t}\n\n\t/**\n\t * Download a firmware binary\n\t * @param  {String} $0.binaryId Binary ID received from a successful compile call\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Request}\n\t */\n\tdownloadFirmwareBinary({ binaryId, auth }) {\n\t\tconst uri = `/v1/binaries/${binaryId}`;\n\t\tconst req = request('get', uri);\n\t\treq.use(this.prefix);\n\t\tthis.headers(req, auth);\n\t\tif (this.debug) {\n\t\t\tthis.debug(req);\n\t\t}\n\t\treturn req;\n\t}\n\n\t/**\n\t * Send a new device public key to the Particle Cloud\n\t * @param  {String} $0.deviceId  Device ID or Name\n\t * @param  {(String|Buffer)} $0.key       Public key contents\n\t * @param  {String} [$0.algorithm=rsa] Algorithm used to generate the public key. Valid values are `rsa` or `ecc`.\n\t * @param  {String} $0.auth      Access Token\n\t * @return {Promise}\n\t */\n\tsendPublicKey({ deviceId, key, algorithm, auth }) {\n\t\treturn this.post(`/v1/provisioning/${deviceId}`, {\n\t\t\tdeviceID: deviceId,\n\t\t\tpublicKey: ( typeof key === 'string' ? key : key.toString() ),\n\t\t\tfilename: 'particle-api',\n\t\t\torder: `manual_${ Date.now() }`,\n\t\t\talgorithm: algorithm || 'rsa'\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Call a device function\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.name     Function name\n\t * @param  {String} $0.argument Function argument\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tcallFunction({ deviceId, name, argument, auth }) {\n\t\treturn this.post(`/v1/devices/${deviceId}/${name}`, {\n\t\t\targs: argument,\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Get a stream of events\n\t * @param  {String} [$0.deviceId] Device ID or Name, or `mine` to indicate only your devices.\n\t * @param  {String} [$0.name]     Event Name\n\t * @param  {String} [$0.org]     Organization Slug\n\t * @param  {String} [$0.product]     Product Slug or Product ID\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise} If the promise resolves, the resolution value will be an EventStream object that will\n\t * emit 'event' events, as well as the specific named event.\n\t */\n\tgetEventStream({ deviceId, name, org, product, auth }) {\n\t\tlet uri = '/v1/';\n\t\tif (org) {\n\t\t\turi += `orgs/${org}/`;\n\t\t}\n\n\t\tif (product) {\n\t\t\turi += `products/${product}/`;\n\t\t}\n\n\t\tif (deviceId) {\n\t\t\turi += 'devices/';\n\t\t\tif (!(deviceId.toLowerCase() === 'mine')) {\n\t\t\t\turi += `${deviceId}/`;\n\t\t\t}\n\t\t}\n\n\t\turi += 'events';\n\n\t\tif (name) {\n\t\t\turi += `/${encodeURIComponent(name)}`;\n\t\t}\n\n\t\treturn new EventStream(`${this.baseUrl}${uri}`, auth, { debug: this.debug }).connect();\n\t}\n\n\t/**\n\t * Publish a event to the Particle Cloud\n\t * @param  {String} $0.name      Event name\n\t * @param  {String} $0.data      Event data\n\t * @param  {Boolean} $0.isPrivate Should the event be publicly available?\n\t * @param  {String} $0.auth      Access Token\n\t * @return {Promise}\n\t */\n\tpublishEvent({ name, data, isPrivate, auth }) {\n\t\treturn this.post('/v1/devices/events', {\n\t\t\tname,\n\t\t\tdata,\n\t\t\t'private': isPrivate\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Create a webhook\n\t * @param  {String} $0.deviceId           Device ID or Name\n\t * @param  {String} $0.name               Webhook name\n\t * @param  {String} $0.url                URL the webhook should hit\n\t * @param  {String} [$0.requestType=POST]        HTTP method to use\n\t * @param  {Object} [$0.headers]            Additional headers to add to the webhook\n\t * @param  {Object} [$0.json]               JSON data\n\t * @param  {Object} [$0.query]              Query string data\n\t * @param  {Object} [$0.responseTemplate]   Webhook response template\n\t * @param  {Object} [$0.responseTopic]      Webhook response topic\n\t * @param  {Boolean} [$0.rejectUnauthorized] Reject invalid HTTPS certificates\n\t * @param  {Object} [$0.webhookAuth]        HTTP Basic Auth information\n\t * @param  {Object} [$0.form]               Form data\n\t * @param  {String} $0.auth               Access Token\n\t * @return {Promise}\n\t */\n\tcreateWebhook({ deviceId, name, url, requestType, headers, json, query, responseTemplate, responseTopic, rejectUnauthorized, webhookAuth, form, auth }) {\n\t\tconst data = { event: name, url, requestType, headers, json, query, responseTemplate, responseTopic, rejectUnauthorized, auth: webhookAuth, form };\n\t\tif (deviceId === 'mine') {\n\t\t\tdata.mydevices = true;\n\t\t} else {\n\t\t\tdata.deviceid = deviceId;\n\t\t}\n\t\treturn this.post('/v1/webhooks', data, auth);\n\t}\n\n\t/**\n\t * Delete a webhook\n\t * @param  {String} $0.hookId Webhook ID\n\t * @param  {String} $0.auth   Access Token\n\t * @return {Promise}\n\t */\n\tdeleteWebhook({ hookId, auth }) {\n\t\treturn this.delete(`/v1/webhooks/${hookId}`, null, auth);\n\t}\n\n\t/**\n\t * List all webhooks owned by the account\n\t * @param  {String} $0.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistWebhooks({ auth }) {\n\t\treturn this.get('/v1/webhooks', auth);\n\t}\n\n\t/**\n\t * Get details about the current user\n\t * @param  {String} $0.auth Access Token\n\t * @return {Promise}\n\t */\n\tgetUserInfo({ auth }) {\n\t\treturn this.get('/v1/user', auth);\n\t}\n\n\tsetUserInfo({ stripeToken, auth }) {\n\t\treturn this.put('/v1/user', {\n\t\t\tstripe_token: stripeToken,\n\t\t}, auth);\n\t}\n\n\tcheckSIM({ iccid, auth }) {\n\t\treturn this.head(`/v1/sims/${iccid}`, auth);\n\t}\n\n\tactivateSIM({ iccid, countryCode, promoCode, auth }) {\n\t\treturn this.put(`/v1/sims/${iccid}`, {\n\t\t\tcountry: countryCode,\n\t\t\tpromo_code: promoCode,\n\t\t\taction: 'activate',\n\t\t}, auth);\n\t}\n\n\t/**\n\t * List valid build targets to be used for compiling\n\t * @param  {String} $0.auth         Access Token\n\t * @param  {Boolean} [$0.onlyFeatured=false] Only list featured build targets\n\t * @return {Promise}\n\t */\n\tlistBuildTargets({ auth, onlyFeatured = undefined }) {\n\t\tlet query;\n\t\tif (onlyFeatured !== undefined) {\n\t\t\tquery = { featured: !!onlyFeatured };\n\t\t}\n\t\treturn this.get('/v1/build_targets', auth, query);\n\t}\n\n\tget(uri, auth, query = undefined) {\n\t\treturn this.request({ uri, auth, method: 'get', query: query });\n\t}\n\n\thead(uri, auth) {\n\t\treturn this.request({ uri, auth, method: 'head' });\n\t}\n\n\tpost(uri, data, auth) {\n\t\treturn this.request({ uri, data, auth, method: 'post' });\n\t}\n\n\tput(uri, data, auth) {\n\t\treturn this.request({ uri, data, auth, method: 'put' });\n\t}\n\n\tdelete(uri, data, auth) {\n\t\treturn this.request({ uri, data, auth, method: 'delete' });\n\t}\n\n\trequest({ uri, method, data = undefined, auth, query = undefined, form = undefined, files = undefined }) {\n\t\tlet requestFiles;\n\t\tif (files) {\n\t\t\trequestFiles = {};\n\t\t\tObject.keys(files).forEach((k, i) => {\n\t\t\t\tconst name = i ? `file${i + 1}` : 'file';\n\t\t\t\trequestFiles[name] = {\n\t\t\t\t\tdata: files[k],\n\t\t\t\t\tpath: k\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\treturn this._request({ uri, method, data, auth, query, form, files: requestFiles });\n\t}\n\n\t_request({ uri, method, data, auth, query, form, files }) {\n\t\treturn new Promise((fulfill, reject) => {\n\t\t\tconst req = request(method, uri);\n\t\t\treq.use(this.prefix);\n\t\t\tthis.headers(req, auth);\n\t\t\tif (query) {\n\t\t\t\treq.query(query);\n\t\t\t}\n\t\t\tif (files) {\n\t\t\t\tObject.keys(files).forEach(k => {\n\t\t\t\t\treq.attach(k, files[k].data, files[k].path);\n\t\t\t\t});\n\t\t\t\tif (form) {\n\t\t\t\t\tObject.keys(form).forEach(k => {\n\t\t\t\t\t\treq.field(k, form[k]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (form) {\n\t\t\t\treq.type('form');\n\t\t\t\treq.send(form);\n\t\t\t} else if (data) {\n\t\t\t\treq.send(data);\n\t\t\t}\n\n\t\t\tif (this.debug) {\n\t\t\t\tthis.debug(req);\n\t\t\t}\n\n\t\t\treq.end((error, res) => {\n\t\t\t\tconst body = res && res.body;\n\t\t\t\tif (error) {\n\t\t\t\t\tconst statusCode = error.status;\n\t\t\t\t\tlet errorDescription = `${statusCode ? 'HTTP error' : 'Network error'} ${statusCode} from ${uri}`;\n\t\t\t\t\tif (body && body.error_description) {\n\t\t\t\t\t\terrorDescription += ' - ' + body.error_description;\n\t\t\t\t\t}\n\t\t\t\t\treject({ statusCode, errorDescription, error, body });\n\t\t\t\t} else {\n\t\t\t\t\tfulfill({\n\t\t\t\t\t\tbody: body,\n\t\t\t\t\t\tstatusCode: res.statusCode,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\theaders(req, auth) {\n\t\tif (!auth) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof auth === 'object') {\n\t\t\treq.auth(auth.username, auth.password);\n\t\t} else {\n\t\t\treq.set({ Authorization: `Bearer ${auth}` });\n\t\t}\n\t}\n}\n\nexport default Particle;\n"]}